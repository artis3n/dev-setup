---

- name: Node | Get latest nvm release
  uri:
    url: https://api.github.com/repos/nvm-sh/nvm/releases/latest
    headers:
      Accept: application/vnd.github.v3+json
    body_format: json
    return_content: yes
  register: nvm_release

- name: Node | Set nvm version
  set_fact:
    nvm_version: "{{ nvm_release.json.tag_name[1:] }}"

- name: Node | Download nvm
  get_url:
    url: https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh
    dest: "{{ install_dir }}/{{ nvm_install_script }}"
    mode: 0764

- name: Node | Install nvm
  command: bash "{{ install_dir }}/{{ nvm_install_script }}"
  args:
    creates: "{{ lookup('env', 'HOME') }}/.nvm/nvm.sh"

# - name: Node | Add nvm to profiles
#   lineinfile:
#     path: "{{ lookup('env', 'HOME') }}/.zshrc"
#     line: |
#       export NVM_DIR="$HOME/.nvm"
#       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

#       autoload -U add-zsh-hook
#       load-nvmrc() {
#         local node_version="$(nvm version)"
#         local nvmrc_path="$(nvm_find_nvmrc)"

#         if [ -n "$nvmrc_path" ]; then
#           local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

#           if [ "$nvmrc_node_version" = "N/A" ]; then
#             nvm install
#           elif [ "$nvmrc_node_version" != "$node_version" ]; then
#             nvm use
#           fi
#         elif [ "$node_version" != "$(nvm version default)" ]; then
#           echo "Reverting to nvm default version"
#           nvm use default
#         fi
#       }
#       add-zsh-hook chpwd load-nvmrc
#       load-nvmrc
#     state: present

- name: Node | Install Node
  shell: source {{ lookup('env', 'HOME') }}/.nvm/nvm.sh && nvm install {{ node_version }}
  args:
    creates: "{{ lookup('env', 'HOME') }}/.nvm/versions/node/v{{ node_version }}/bin/node"
    executable: /bin/bash
